/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2015-12-03 22:13:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;

public final class getItems_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.concurrent.TimeUnit");
    _jspx_imports_classes.add("java.util.StringTokenizer");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  ");

      String username = "";
      if (session.getAttribute("login") != null) {
        username = session.getAttribute("login").toString();
      }
      else {
        out.println("Invalid session! You must log back into the system.");
        return;
      }
    	final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    	final String DB_URL = "jdbc:mysql://localhost:3306/SilkRoad 5.0";
    	final String USER = "root";
    	final String PASS = "root";
      ArrayList usages = new ArrayList();
    	// Code starts here
      StringTokenizer st = new StringTokenizer(request.getParameter("usage"),"|");
      while(st.hasMoreTokens()) {
        usages.add(st.nextToken());
      }
    	String sql = null;
    	Connection conn = null;
    	CallableStatement cs = null;
      ResultSet res = null;

      // Will hold the bid histories
    	ResultSet bidHistoryRes = null;

      // Will hold the winner of the auction
      ResultSet winnerRes = null;

      boolean isCustomer = true;

      ResultSet userTypeRes = null;
    	try	{

    			//Register JDBC driver
    			Class.forName(JDBC_DRIVER).newInstance();

    			// Open a connection
    		  conn = java.sql.DriverManager.getConnection(DB_URL, USER, PASS);

          cs = conn.prepareCall("call GetUserType(?)");
          cs.setString(1, username);
          cs.execute();

    			// Extract the status and the return msg
    			userTypeRes = cs.getResultSet();
          // TODO. Error handling
          while (userTypeRes.next()) {
            isCustomer = userTypeRes.getString(1).equalsIgnoreCase("Customer");
          }

          // Set to 1 if we want to return auctions even if they're completed
          int returnAllAuctions = usages.contains("all") ? 1 : 0;

          // We're either filtering by itemname or itemtype
          if (usages.contains("name")) {
            String name1 = request.getParameter("name1");
            String name2 = request.getParameter("name2");
            String name3 = request.getParameter("name3");
      			cs = conn.prepareCall("call GetItemsByKeywords(?, ?, ?, ?, ?)");
            cs.setString(1, name1);
            cs.setString(2, name2);
            cs.setString(3, name3);
            cs.setString(4, usages.contains("user") ? username : "");
            cs.setInt(5, returnAllAuctions);
          } else if (usages.contains("type")) {
            String type = request.getParameter("type");
      			cs = conn.prepareCall("call GetItemsByType(?, ?, ?)");
            cs.setString(1, type);
            cs.setString(2, usages.contains("user") ? username : "");
            cs.setInt(3, returnAllAuctions);
          } else if (usages.contains("seller")) {
            String sellerUsername = request.getParameter("seller");
            cs = conn.prepareCall("call GetItemsBySeller(?, ?, ?)");
            cs.setString(1, sellerUsername);
            cs.setString(2, usages.contains("user") ? username : "");
            cs.setInt(3, returnAllAuctions);
          }

    			cs.execute();

    			// Extract the status and the return msg
    			res = cs.getResultSet();
          // TODO. Error handling
          if (cs.getMoreResults()) {
              res = cs.getResultSet();
          }
      
      out.write("\r\n");
      out.write("      <script type=\"javascript/text\" id=\"runscript\">\r\n");
      out.write("      // TODO. Get this to just use auctionTableScript\r\n");
      out.write("      $(function() {\r\n");
      out.write("          // Find arg must match the closest tag after <td colspan=\"3\">\r\n");
      out.write("          $(\"td[colspan=5]\").find(\"div\").hide();\r\n");
      out.write("          $(\"#auctionDataTable\").click(function(event) {\r\n");
      out.write("              event.stopPropagation();\r\n");
      out.write("              var target = $(event.target);\r\n");
      out.write("              var plus = \"<span class=\\\"glyphicon glyphicon-plus\\\" aria-hidden=\\\"true\\\"></span>\";\r\n");
      out.write("              var minus = \"<span class=\\\"glyphicon glyphicon-minus\\\" aria-hidden=\\\"true\\\"></span>\";\r\n");
      out.write("              // Without this check we run the risk of editing the tables on non + and -\r\n");
      out.write("              if (target.html().contains(\"+\") || target.html().contains(\"-\")) {\r\n");
      out.write("                  if (target.closest(\"td\").attr(\"colspan\") > 1 ) {\r\n");
      out.write("                      slideUp();\r\n");
      out.write("                      target.closest(\"tr\").prev().find(\"td:first\").html(minus);\r\n");
      out.write("                  } else {\r\n");
      out.write("                      // Find arg must match the same that we hid\r\n");
      out.write("                      target.closest(\"tr\").next().find(\"div\").slideToggle();\r\n");
      out.write("                      var path = target.closest(\"tr\").find(\"td:first\").find(\"button:first\");\r\n");
      out.write("                      if (path.html().contains(plus)) {\r\n");
      out.write("                          path.html(minus);\r\n");
      out.write("                      }\r\n");
      out.write("                      else {\r\n");
      out.write("                          path.html(plus);\r\n");
      out.write("                      }\r\n");
      out.write("                 }\r\n");
      out.write("              }\r\n");
      out.write("          });\r\n");
      out.write("          // TODO. Maybe add a counter for the time left column?\r\n");
      out.write("          // function startCountdown(date) {\r\n");
      out.write("          //  $(\"#getting-started\").countdown(date, function(event) {\r\n");
      out.write("          //     $(this).text(\r\n");
      out.write("          //       event.strftime('%D days %H:%M:%S')\r\n");
      out.write("          //     );\r\n");
      out.write("          //   });\r\n");
      out.write("          // }\r\n");
      out.write("      });\r\n");
      out.write("      </script>\r\n");
      out.write("\r\n");
      out.write("\t  <style>\r\n");
      out.write("\t\t.expired { color: red; }\r\n");
      out.write("\t\t.active  { color: green; }\r\n");
      out.write("\t  </style>\r\n");
      out.write("\r\n");
      out.write("      <!-- modal which gets input from user to place a bid -->\r\n");
      out.write("      <div id=\"bidModal\" class=\"modal fade\">\r\n");
      out.write("        <div class=\"modal-dialog\">\r\n");
      out.write("            <div class=\"modal-content\">\r\n");
      out.write("                <div class=\"modal-header myModal auctionTableHeader\">Place Bid</div>\r\n");
      out.write("                <div class=\"modal-body\">\r\n");
      out.write("                    <input type=\"hidden\" id=\"auctionID\">\r\n");
      out.write("                    <label class = \"control-label\" for=\"bidTxt\">Enter bid amount:</label>\r\n");
      out.write("                    <div class = \"controls regControl input-symbol-dollar\">\r\n");
      out.write("                        <span>$</span>\r\n");
      out.write("            \t\t\t\t\t\t<input type=\"text\" class=\"form-control\" name=\"bidTxt\" id=\"bidTxt\">\r\n");
      out.write("            \t\t\t\t</div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"modal-footer\">\r\n");
      out.write("                    <button id=\"placeBidBtn\" class=\"btn btn-primary\" data-dismiss=\"modal\" onclick=\"placeBid(auctionID, bidTxt.value)\" aria-hidden=\"true\">OK</button>\r\n");
      out.write("                </div>\r\n");
      out.write("              </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div> <!-- bidModal -->\r\n");
      out.write("    <!-- modal which gets input from user to place a bid -->\r\n");
      out.write("    <div id=\"itemDetailsModal\" class=\"modal fade\">\r\n");
      out.write("      <div class=\"modal-dialog\">\r\n");
      out.write("          <div class=\"modal-content\">\r\n");
      out.write("              <div class=\"modal-header myModal auctionTableHeader\">Place Bid</div>\r\n");
      out.write("              <div class=\"modal-body\">\r\n");
      out.write("                  <input type=\"hidden\" id=\"auctionID\">\r\n");
      out.write("                  <label class = \"control-label\" for=\"bidTxt\">Enter bid amount:</label>\r\n");
      out.write("                  <div class = \"controls regControl input-symbol-dollar\">\r\n");
      out.write("                      <span>$</span>\r\n");
      out.write("                      <input type=\"text\" class=\"form-control\" name=\"bidTxt\" id=\"bidTxt\">\r\n");
      out.write("                  </div>\r\n");
      out.write("              </div>\r\n");
      out.write("              <div class=\"modal-footer\">\r\n");
      out.write("                  <button id=\"placeBidBtn\" class=\"btn btn-primary\" data-dismiss=\"modal\" onclick=\"placeBid(auctionID, bidTxt.value)\" aria-hidden=\"true\">OK</button>\r\n");
      out.write("              </div>\r\n");
      out.write("            </form>\r\n");
      out.write("          </div>\r\n");
      out.write("      </div>\r\n");
      out.write("  </div> <!-- bidModal -->\r\n");
      out.write("  <table id =\"auctionDataTable\" class=\"table table-striped table-bordered dt-responsive nowrap auctionHouseTable\">\r\n");
      out.write("      <thead>\r\n");
      out.write("        <tr>\r\n");
      out.write("          <th width=\"1%\"></th>\r\n");
      out.write("          <th>Item</th>\r\n");
      out.write("          <th>Seller</th>\r\n");
      out.write("\t\t      <th>Minimum Bid</th>\r\n");
      out.write("          <th>Current Bid</th>\r\n");
      out.write("          <th>Time Left</th>\r\n");
      out.write("          <th>Winner</th>\r\n");
      out.write("          <th></th>\r\n");
      out.write("        </tr>\r\n");
      out.write("      </thead>\r\n");
      out.write("      <tbody>\r\n");
      out.write("        ");

          while(res.next()) {
            int auctionID = res.getInt("AuctionID");
          
      out.write("\r\n");
      out.write("          <tr>\r\n");
      out.write("            <td>\r\n");
      out.write("              <button type=\"button\" class=\"btn btn-default btn-sm\">\r\n");
      out.write("                <span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span>\r\n");
      out.write("              </button>\r\n");
      out.write("            </td>\r\n");
      out.write("            <td>\r\n");
      out.write("              <!-- Display the details of an item when its name is clicked -->\r\n");
      out.write("              <a href=\"javascript:showItemDetails('");
      out.print( res.getString("ItemName") );
      out.write("',\r\n");
      out.write("                                                      '");
      out.print( res.getString("ItemType"));
      out.write("',\r\n");
      out.write("                                                      '");
      out.print( res.getString("Description"));
      out.write("',\r\n");
      out.write("                                                      '");
      out.print( res.getString("ItemYear"));
      out.write("',\r\n");
      out.write("                                                      '");
      out.print( res.getString("NumCopies") );
      out.write("' )\">\r\n");
      out.write("              ");
      out.print(res.getString("ItemName"));
      out.write("\r\n");
      out.write("            </a>\r\n");
      out.write("            </td>\r\n");
      out.write("            <td>\r\n");
      out.write("              ");
      out.print(res.getString("SellerUsername"));
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("            <td>\r\n");
      out.write("              US $");
      out.print(res.getString("MinimuBid"));
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("              ");
 String empty = "-";
                if (res.getInt("CurrentBid") == 0) {
                  int temp = 1; 
      out.write("\r\n");
      out.write("                  ");
      out.print( empty );
      out.write("\r\n");
      out.write("                ");
 } else { 
      out.write("\r\n");
      out.write("                  US $");
      out.print(res.getString("CurrentBid"));
      out.write("\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("\t\t\t<td ");
 if (res.getString("Expired").equals("Y")) { 
      out.write(" class=\"expired\" ");
 } else { 
      out.write(" class=\"active\" ");
 } 
      out.write(" >\r\n");
      out.write("              ");
 long seconds = Long.parseLong(res.getString("SecondsLeft"));
               int day = (int)TimeUnit.SECONDS.toDays(seconds);
               long hours = TimeUnit.SECONDS.toHours(seconds) - (day *24);
               long minute = TimeUnit.SECONDS.toMinutes(seconds) - (TimeUnit.SECONDS.toHours(seconds)* 60);
               long second = TimeUnit.SECONDS.toSeconds(seconds) - (TimeUnit.SECONDS.toMinutes(seconds) *60);
              
      out.write("\r\n");
      out.write("              ");
      out.print( day + "d " + hours + "h " + minute + "m" );
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("            <td>\r\n");
      out.write("              ");
 String winner = "";
                 if (res.getString("Expired").equals("Y")) {
                   cs = conn.prepareCall("call GetAuctionWinner(?)");
                   cs.setInt(1, auctionID);
                   cs.execute();
                   winnerRes = cs.getResultSet();

                   while (winnerRes.next()) {
                       winner = winnerRes.getString("Username");
                   }
                 } 
      out.write("\r\n");
      out.write("              ");
      out.print(winner);
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("            <td width = \"1%\">\r\n");
      out.write("               \t");
 if ( !res.getString("SellerUsername").equals(username) && res.getString("Expired").equals("N") && isCustomer) { 
      out.write("\r\n");
      out.write("\t\t\t\t\t<button id=\"BidButton\" class=\"btn btn-primary\" onclick=\"auctionAction(this)\" aria-hidden=\"true\"\r\n");
      out.write("\t\t\t\t\tvalue=\"");
      out.print(res.getInt("AuctionID"));
      out.write("\">Bid Now</button>\r\n");
      out.write("\t\t\t\t");
	} 
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("          </tr>\r\n");
      out.write("          <tr>\r\n");
      out.write("            <!-- Get the auction bid history -->\r\n");
      out.write("            <td colspan=\"5\">\r\n");
      out.write("              <div class=\"bidHistory panel-primary\">\r\n");
      out.write("                  <div class=\"panel-heading\" style=\"background-color:#20E85E;\">\r\n");
      out.write("                    <h3 class=\"panel-title\">Bid History</h3>\r\n");
      out.write("                  </div>\r\n");
      out.write("                  <table class =\"table table-hover bidHistoryTable\">\r\n");
      out.write("                    <thead>\r\n");
      out.write("                      <tr>\r\n");
      out.write("                        <th>User</th>\r\n");
      out.write("                        <th>Current Bid $</th>\r\n");
      out.write("                        <th>Bid Time</th>\r\n");
      out.write("                      </tr>\r\n");
      out.write("                    </thead>\r\n");
      out.write("                    <tbody>\r\n");
      out.write("                    ");

                    cs = conn.prepareCall("call GetAuctionBidHistory(?)");
                    cs.setInt(1, auctionID);
                    cs.execute();

                    // Extract the status and the return msg
                    bidHistoryRes = cs.getResultSet();
                    // TODO. Error handling
                    if (cs.getMoreResults()) {
                      bidHistoryRes = cs.getResultSet();
                      SimpleDateFormat dt1 = new SimpleDateFormat("MMMM dd, yyyy hh:mm:ss a");
                      Date date;
                      Timestamp timestamp;
                      while (bidHistoryRes.next()) {
                          timestamp = bidHistoryRes.getTimestamp("BidTime");
                      
      out.write("\r\n");
      out.write("                      <tr>\r\n");
      out.write("                        <td>\r\n");
      out.write("                          ");
      out.print( bidHistoryRes.getString("BuyerUsername") );
      out.write("\r\n");
      out.write("                        </td>\r\n");
      out.write("                        <td>\r\n");
      out.write("                          ");
      out.print( bidHistoryRes.getBigDecimal("BidPrice") );
      out.write("\r\n");
      out.write("                        </td>\r\n");
      out.write("                        <td>\r\n");
      out.write("                          ");

                              if (timestamp != null) {
                                date = new Date(timestamp.getTime());
                          
      out.write("\r\n");
      out.write("                          ");
      out.print( 	dt1.format(date) );
      out.write("\r\n");
      out.write("                          ");
  } 
      out.write("\r\n");
      out.write("                        </td>\r\n");
      out.write("                  </tr>\r\n");
      out.write("                       ");
 } // while (bidHistoryRes.next())
                     } // if (cs.getMoreResults())
                  
      out.write("\r\n");
      out.write("            </tbody>\r\n");
      out.write("          </table>\r\n");
      out.write("        </div> <!-- bidHistory -->\r\n");
      out.write("            ");
 } // while(allAuctionsRes.next())
          } catch (Exception e) {
              e.printStackTrace();
            } finally {
              try {
                userTypeRes.close();
                winnerRes.close();
                bidHistoryRes.close();
                res.close();
                conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
          } 
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      </tbody>\r\n");
      out.write("      </table>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
